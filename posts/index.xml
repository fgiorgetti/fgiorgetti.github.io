<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Fernando Giorgetti - blog</title>
        <link>https://fgiorgetti.github.io/posts/</link>
        <description>Recent content in Posts on Fernando Giorgetti - blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <copyright>Fernando Giorgetti</copyright>
        <lastBuildDate>Mon, 17 Mar 2025 22:20:50 -0300</lastBuildDate>
        <atom:link href="https://fgiorgetti.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Decentralizing Skupper network setup with Vault and Ansible</title>
            <link>https://fgiorgetti.github.io/posts/20250311-skupper-ansible-vault/</link>
            <pubDate>Mon, 17 Mar 2025 22:20:50 -0300</pubDate>
            
            <guid>https://fgiorgetti.github.io/posts/20250311-skupper-ansible-vault/</guid>
            <description>Introduction When setting up a Skupper network, a single persona doesn’t always have access to all the participant clusters, namespaces, or non-Kubernetes hosts involved.
This can create a significant hurdle for automation, as Access Tokens or Links generated at one site can’t be automatically shared with a target site.
To address this, the best approach is to assign separate personas to handle the setup of each site within the Skupper network.</description>
            <content type="html"><![CDATA[<p><img src="/posts/20250311-skupper-ansible-vault/images/skupper-vault-ansible.jpg"></p>
<h2 id="introduction">Introduction</h2>
<p>When setting up a Skupper network, a single persona doesn’t always have access to all the participant clusters, namespaces, or non-Kubernetes hosts involved.</p>
<p>This can create a significant hurdle for automation, as Access Tokens or Links generated at one site can’t be automatically shared with a target site.</p>
<p>To address this, the best approach is to assign separate personas to handle the setup of each site within the Skupper network.</p>
<p>This is where HashiCorp Vault comes in handy. Vault enables us to decentralize the token generation and installation processes, allowing them to happen independently and at different times.</p>
<p>In this post, we’ll walk through an automated solution using Ansible. This method empowers different personas—each responsible for a single Skupper site—to build a Skupper network by leveraging HashiCorp Vault as a secure hub for creating and accessing Access Tokens.</p>
<h2 id="pre-requisites">Pre-requisites</h2>
<ul>
<li><a href="https://www.vaultproject.io/">Hashicorp Vault</a></li>
<li><a href="https://skupper.io/start/minikube.html">A minikube cluster</a></li>
<li>Minikube tunnel running</li>
<li>Skupper (&gt;= 2.0.0)</li>
<li>Ansible (&gt;= 2.15.0)</li>
<li>Podman (or Docker)</li>
<li>Install the <a href="https://galaxy.ansible.com/ui/repo/published/skupper/v2/">skupper.v2</a> Ansible collection and its dependent python modules
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ansible-galaxy collection install skupper.v2
</span></span><span style="display:flex;"><span>python -m pip install kubernetes PyYAML
</span></span></code></pre></div></li>
</ul>
<h2 id="scenario">Scenario</h2>
<p>In order to make it easy and simple to evaluate this scenario, we will have both Vault and Podman
running locally (on your own machine).</p>
<p>The public and private namespaces can also run on a local minikube cluster, or any running cluster
defined by the default kubernetes client config file: <code>${HOME}/.kube/config</code>.</p>
<p>We are going to use a modified version of the <a href="https://github.com/skupperproject/skupper-example-patient-portal">Patient Portal example</a> (for Skupper V2),
where we have two Skupper sites running on different namespaces, within the same Kubernetes cluster
and a Podman site.</p>
<p><img src="/posts/20250311-skupper-ansible-vault/images/patientportal-v2.png"></p>
<p>In the <code>public</code> namespace, we will have a Front-end application that depends on a <code>payment-processor</code>
microservice, which will run at the <code>private</code> namespace. The Front-End also needs access to a Database,
which will run as a local podman container in the host machine.</p>
<p>Hashicorp Vault will also run in development mode (never run it this way in production) for an easy and
quick evaluation.</p>
<p>We will create Vault policies to define which users can write tokens to a specific path in Vault and which others can read those tokens from it.</p>
<p>Then we are going to use an Ansible playbook to setup each individual site, in a way that they can be applied
in any order.</p>
<h2 id="hands-on">Hands-on</h2>
<h3 id="run-hashicorp-vault">Run Hashicorp Vault</h3>
<p>First thing to do is to run Hashicorp Vault in development mode:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>vault server -dev -dev-root-token-id root
</span></span></code></pre></div><h3 id="create-vault-policies">Create Vault Policies</h3>
<p>Once it is running, we need to create the policies.</p>
<p>Two policies will be created.
One called <strong>public-admin</strong> which allows writing data to path <code>secret/public</code>.
The other is called <strong>public-read</strong> which only allows reading data from <code>secret/public</code>.</p>
<p>For that, we need to create two files: <code>public-admin.hcl</code> and <code>public-read.hcl</code>.
You can download them here:</p>
<ul>
<li><a href="/posts/20250311-skupper-ansible-vault/resources/vault/public-admin.hcl"><code>public-admin.hcl</code></a></li>
<li><a href="/posts/20250311-skupper-ansible-vault/resources/vault/public-read.hcl"><code>public-read.hcl</code></a></li>
</ul>
<p><strong>public-admin.hcl</strong></p>





  <div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="public-1"><a style="outline:none;text-decoration:none;color:inherit" href="#public-1">1</a>
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="public-2"><a style="outline:none;text-decoration:none;color:inherit" href="#public-2">2</a>
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="public-3"><a style="outline:none;text-decoration:none;color:inherit" href="#public-3">3</a>
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">path</span> <span style="color:#e6db74">&#34;secret/data/public&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">capabilities</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#960050;background-color:#1e0010">[</span><span style="color:#f92672">&#34;create&#34;</span>, <span style="color:#f92672">&#34;update&#34;</span>, <span style="color:#f92672">&#34;patch&#34;</span>, <span style="color:#f92672">&#34;read&#34;</span>, <span style="color:#f92672">&#34;delete&#34;</span><span style="color:#960050;background-color:#1e0010">]</span>
</span></span><span style="display:flex;"><span>}</span></span></code></pre></td></tr></table>
</div>
</div>


<p><strong>public-read.hcl</strong></p>





  <div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="public-1"><a style="outline:none;text-decoration:none;color:inherit" href="#public-1">1</a>
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="public-2"><a style="outline:none;text-decoration:none;color:inherit" href="#public-2">2</a>
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="public-3"><a style="outline:none;text-decoration:none;color:inherit" href="#public-3">3</a>
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">path</span> <span style="color:#e6db74">&#34;secret/data/public&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">capabilities</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#960050;background-color:#1e0010">[</span><span style="color:#f92672">&#34;read&#34;</span><span style="color:#960050;background-color:#1e0010">]</span>
</span></span><span style="display:flex;"><span>}</span></span></code></pre></td></tr></table>
</div>
</div>


<p>To create these policies, run:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>export VAULT_ADDR<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;http://127.0.0.1:8200&#39;</span>
</span></span><span style="display:flex;"><span>vault policy write public-admin public-admin.hcl
</span></span><span style="display:flex;"><span>vault policy write public-read public-read.hcl
</span></span></code></pre></div><h3 id="create-vault-tokens">Create Vault Tokens</h3>
<p>With the policies in place, we need to create Vault Tokens associated with each of those policies.
Here we can create three separate Vault Tokens, so each persona has access to their own tokens only.</p>
<h4 id="public-site-vault-token">Public site Vault Token</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>export VAULT_ADDR<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;http://127.0.0.1:8200&#39;</span>
</span></span><span style="display:flex;"><span>vault token create -display-name<span style="color:#f92672">=</span>public -policy<span style="color:#f92672">=</span>public-admin -format<span style="color:#f92672">=</span>json | jq -r .auth.client_token &gt; public.token
</span></span></code></pre></div><h4 id="private-site-vault-token">Private site Vault Token</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>export VAULT_ADDR<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;http://127.0.0.1:8200&#39;</span>
</span></span><span style="display:flex;"><span>vault token create -display-name<span style="color:#f92672">=</span>private -policy<span style="color:#f92672">=</span>public-read -format<span style="color:#f92672">=</span>json | jq -r .auth.client_token &gt; private.token
</span></span></code></pre></div><h4 id="podman-site-vault-token">Podman site Vault Token</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>export VAULT_ADDR<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;http://127.0.0.1:8200&#39;</span>
</span></span><span style="display:flex;"><span>vault token create -display-name<span style="color:#f92672">=</span>podman -policy<span style="color:#f92672">=</span>public-read -format<span style="color:#f92672">=</span>json | jq -r .auth.client_token &gt; podman.token
</span></span></code></pre></div><h3 id="ansible-playbooks">Ansible Playbooks</h3>
<p>Download the Ansible playbook files below:</p>
<ul>
<li><a href="https://raw.githubusercontent.com/fgiorgetti/fgiorgetti.github.io/refs/heads/main/posts/20250311-skupper-ansible-vault/resources/ansible/playbook-public.yaml">playbook-public.yaml</a></li>
<li><a href="https://raw.githubusercontent.com/fgiorgetti/fgiorgetti.github.io/refs/heads/main/posts/20250311-skupper-ansible-vault/resources/ansible/playbook-private.yaml">playbook-private.yaml</a></li>
<li><a href="https://raw.githubusercontent.com/fgiorgetti/fgiorgetti.github.io/refs/heads/main/posts/20250311-skupper-ansible-vault/resources/ansible/playbook-podman.yaml">playbook-podman.yaml</a></li>
</ul>
<h4 id="public-site">Public site</h4>
<p>Playbook: <a href="https://raw.githubusercontent.com/fgiorgetti/fgiorgetti.github.io/refs/heads/main/posts/20250311-skupper-ansible-vault/resources/ansible/playbook-public.yaml">playbook-public.yaml</a>.</p>
<ol>
<li>This initial task ensures that the Skupper V2 Controller is running in the <code>skupper</code> namespace.
It uses the latest development version of Skupper (v2-dev-release).</li>
</ol>











  <div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="public-6"><a style="outline:none;text-decoration:none;color:inherit" href="#public-6">6</a>
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="public-7"><a style="outline:none;text-decoration:none;color:inherit" href="#public-7">7</a>
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="public-8"><a style="outline:none;text-decoration:none;color:inherit" href="#public-8">8</a>
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="public-9"><a style="outline:none;text-decoration:none;color:inherit" href="#public-9">9</a>
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Ensure Skupper V2 controller is running</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">kubernetes.core.k8s</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">state</span>: <span style="color:#ae81ff">present</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">src</span>: <span style="color:#ae81ff">https://github.com/skupperproject/skupper/releases/download/v2-dev-release/skupper-cluster-scope.yaml</span></span></span></code></pre></td></tr></table>
</div>
</div>


<ol start="2">
<li>Here we create all the resources needed to have the FrontEnd application running in the <code>public</code> namespace,
as well as all the Skupper resources needed (Site and Listeners).</li>
</ol>











  <div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="public-11"><a style="outline:none;text-decoration:none;color:inherit" href="#public-11">11</a>
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="public-12"><a style="outline:none;text-decoration:none;color:inherit" href="#public-12">12</a>
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="public-13"><a style="outline:none;text-decoration:none;color:inherit" href="#public-13">13</a>
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="public-14"><a style="outline:none;text-decoration:none;color:inherit" href="#public-14">14</a>
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="public-15"><a style="outline:none;text-decoration:none;color:inherit" href="#public-15">15</a>
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Create public namespace resources</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">skupper.v2.resource</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">state</span>: <span style="color:#ae81ff">present</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">path</span>: <span style="color:#ae81ff">https://giorgetti.com.br/posts/20250311-skupper-ansible-vault/resources/skupper/public.yaml</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">namespace</span>: <span style="color:#ae81ff">public</span></span></span></code></pre></td></tr></table>
</div>
</div>


<ol start="3">
<li>A Skupper Link is then generated and stored in a host variable named <code>public</code>.</li>
</ol>











  <div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="public-17"><a style="outline:none;text-decoration:none;color:inherit" href="#public-17">17</a>
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="public-18"><a style="outline:none;text-decoration:none;color:inherit" href="#public-18">18</a>
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="public-19"><a style="outline:none;text-decoration:none;color:inherit" href="#public-19">19</a>
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="public-20"><a style="outline:none;text-decoration:none;color:inherit" href="#public-20">20</a>
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="public-21"><a style="outline:none;text-decoration:none;color:inherit" href="#public-21">21</a>
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="public-22"><a style="outline:none;text-decoration:none;color:inherit" href="#public-22">22</a>
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Create a Skupper Link</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">skupper.v2.token</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">name</span>: <span style="color:#ae81ff">public-token</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">namespace</span>: <span style="color:#ae81ff">public</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">type</span>: <span style="color:#ae81ff">link</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">register</span>: <span style="color:#ae81ff">public</span></span></span></code></pre></td></tr></table>
</div>
</div>


<ol start="4">
<li>Finally we store the Skupper Link generated in the previous task into Hashicorp Vault,
and we do that using the Vault Token (credentials) provided through Ansible variable <code>vault_token</code>.</li>
</ol>











  <div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="public-24"><a style="outline:none;text-decoration:none;color:inherit" href="#public-24">24</a>
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="public-25"><a style="outline:none;text-decoration:none;color:inherit" href="#public-25">25</a>
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="public-26"><a style="outline:none;text-decoration:none;color:inherit" href="#public-26">26</a>
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="public-27"><a style="outline:none;text-decoration:none;color:inherit" href="#public-27">27</a>
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="public-28"><a style="outline:none;text-decoration:none;color:inherit" href="#public-28">28</a>
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="public-29"><a style="outline:none;text-decoration:none;color:inherit" href="#public-29">29</a>
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="public-30"><a style="outline:none;text-decoration:none;color:inherit" href="#public-30">30</a>
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="public-31"><a style="outline:none;text-decoration:none;color:inherit" href="#public-31">31</a>
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="public-32"><a style="outline:none;text-decoration:none;color:inherit" href="#public-32">32</a>
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Store public Link in Vault</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">community.hashi_vault.vault_write</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">url</span>: <span style="color:#ae81ff">http://127.0.0.1:8200</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">path</span>: <span style="color:#ae81ff">secret/data/public</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">auth_method</span>: <span style="color:#ae81ff">token</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">token</span>: <span style="color:#e6db74">&#34;{{ lookup(&#39;file&#39;, vault_token) }}&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">data</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">data</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">token</span>: <span style="color:#e6db74">&#34;{{ public.token }}&#34;</span></span></span></code></pre></td></tr></table>
</div>
</div>


<h4 id="private-site">Private site</h4>
<p>Playbook: <a href="https://raw.githubusercontent.com/fgiorgetti/fgiorgetti.github.io/refs/heads/main/posts/20250311-skupper-ansible-vault/resources/ansible/playbook-private.yaml">playbook-private.yaml</a>.</p>
<ol>
<li>The initial task, is the same as shown in the <code>playbook-public.yaml</code>. It ensures that the Skupper V2 Controller
is running in the <code>skupper</code> namespace.</li>
</ol>











  <div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="public-6"><a style="outline:none;text-decoration:none;color:inherit" href="#public-6">6</a>
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="public-7"><a style="outline:none;text-decoration:none;color:inherit" href="#public-7">7</a>
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="public-8"><a style="outline:none;text-decoration:none;color:inherit" href="#public-8">8</a>
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="public-9"><a style="outline:none;text-decoration:none;color:inherit" href="#public-9">9</a>
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Ensure Skupper V2 controller is running</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">kubernetes.core.k8s</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">state</span>: <span style="color:#ae81ff">present</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">src</span>: <span style="color:#ae81ff">https://github.com/skupperproject/skupper/releases/download/v2-dev-release/skupper-cluster-scope.yaml</span></span></span></code></pre></td></tr></table>
</div>
</div>


<ol start="2">
<li>The following task creates all the resources needed to have the Payment Processor microservice running in the <code>private</code>
namespace, as well as all the Skupper resources needed (Site and Connector).</li>
</ol>











  <div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="public-11"><a style="outline:none;text-decoration:none;color:inherit" href="#public-11">11</a>
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="public-12"><a style="outline:none;text-decoration:none;color:inherit" href="#public-12">12</a>
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="public-13"><a style="outline:none;text-decoration:none;color:inherit" href="#public-13">13</a>
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="public-14"><a style="outline:none;text-decoration:none;color:inherit" href="#public-14">14</a>
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="public-15"><a style="outline:none;text-decoration:none;color:inherit" href="#public-15">15</a>
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Create private namespace resources</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">skupper.v2.resource</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">state</span>: <span style="color:#ae81ff">present</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">path</span>: <span style="color:#ae81ff">https://giorgetti.com.br/posts/20250311-skupper-ansible-vault/resources/skupper/private.yaml</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">namespace</span>: <span style="color:#ae81ff">private</span></span></span></code></pre></td></tr></table>
</div>
</div>


<ol start="3">
<li>The Skupper Link is consumed from Vault using the private Vault Token into a host variable named <code>public</code>.</li>
</ol>











  <div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="public-17"><a style="outline:none;text-decoration:none;color:inherit" href="#public-17">17</a>
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="public-18"><a style="outline:none;text-decoration:none;color:inherit" href="#public-18">18</a>
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="public-19"><a style="outline:none;text-decoration:none;color:inherit" href="#public-19">19</a>
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="public-20"><a style="outline:none;text-decoration:none;color:inherit" href="#public-20">20</a>
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="public-21"><a style="outline:none;text-decoration:none;color:inherit" href="#public-21">21</a>
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="public-22"><a style="outline:none;text-decoration:none;color:inherit" href="#public-22">22</a>
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="public-23"><a style="outline:none;text-decoration:none;color:inherit" href="#public-23">23</a>
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Consume public site link from Vault</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">community.hashi_vault.vault_read</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">url</span>: <span style="color:#ae81ff">http://127.0.0.1:8200</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">path</span>: <span style="color:#ae81ff">secret/data/public</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">auth_method</span>: <span style="color:#ae81ff">token </span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">token</span>: <span style="color:#e6db74">&#34;{{ lookup(&#39;file&#39;, vault_token) }}&#34;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">register</span>: <span style="color:#ae81ff">public</span></span></span></code></pre></td></tr></table>
</div>
</div>


<ol start="4">
<li>Last task is to create the Skupper Link as a resource into the <code>private</code> namespace.</li>
</ol>











  <div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="public-25"><a style="outline:none;text-decoration:none;color:inherit" href="#public-25">25</a>
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="public-26"><a style="outline:none;text-decoration:none;color:inherit" href="#public-26">26</a>
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="public-27"><a style="outline:none;text-decoration:none;color:inherit" href="#public-27">27</a>
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="public-28"><a style="outline:none;text-decoration:none;color:inherit" href="#public-28">28</a>
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Creating link to public</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">skupper.v2.resource</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">def</span>: <span style="color:#e6db74">&#34;{{ public.data.data.data.token }}&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">namespace</span>: <span style="color:#ae81ff">private</span></span></span></code></pre></td></tr></table>
</div>
</div>


<h4 id="podman-site">Podman site</h4>
<p>Playbook: <a href="https://raw.githubusercontent.com/fgiorgetti/fgiorgetti.github.io/refs/heads/main/posts/20250311-skupper-ansible-vault/resources/ansible/playbook-podman.yaml">playbook-podman.yaml</a>.</p>
<ol>
<li>The first task runs the Database as a podman container</li>
</ol>











  <div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="public-6"><a style="outline:none;text-decoration:none;color:inherit" href="#public-6"> 6</a>
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="public-7"><a style="outline:none;text-decoration:none;color:inherit" href="#public-7"> 7</a>
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="public-8"><a style="outline:none;text-decoration:none;color:inherit" href="#public-8"> 8</a>
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="public-9"><a style="outline:none;text-decoration:none;color:inherit" href="#public-9"> 9</a>
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="public-10"><a style="outline:none;text-decoration:none;color:inherit" href="#public-10">10</a>
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="public-11"><a style="outline:none;text-decoration:none;color:inherit" href="#public-11">11</a>
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="public-12"><a style="outline:none;text-decoration:none;color:inherit" href="#public-12">12</a>
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="public-13"><a style="outline:none;text-decoration:none;color:inherit" href="#public-13">13</a>
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Run the database container</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">containers.podman.podman_container</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">name</span>: <span style="color:#ae81ff">database</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">image</span>: <span style="color:#ae81ff">quay.io/skupper/patient-portal-database</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">state</span>: <span style="color:#ae81ff">started</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">ports</span>:
</span></span><span style="display:flex;"><span>          - <span style="color:#ae81ff">5432</span>:<span style="color:#ae81ff">5432</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">remove</span>: <span style="color:#66d9ef">true</span></span></span></code></pre></td></tr></table>
</div>
</div>


<ol start="2">
<li>Next we create the Skupper resources using <code>podman</code> as the platform</li>
</ol>











  <div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="public-15"><a style="outline:none;text-decoration:none;color:inherit" href="#public-15">15</a>
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="public-16"><a style="outline:none;text-decoration:none;color:inherit" href="#public-16">16</a>
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="public-17"><a style="outline:none;text-decoration:none;color:inherit" href="#public-17">17</a>
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="public-18"><a style="outline:none;text-decoration:none;color:inherit" href="#public-18">18</a>
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="public-19"><a style="outline:none;text-decoration:none;color:inherit" href="#public-19">19</a>
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Create podman site resources</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">skupper.v2.resource</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">state</span>: <span style="color:#ae81ff">present</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">path</span>: <span style="color:#ae81ff">https://giorgetti.com.br/posts/20250311-skupper-ansible-vault/resources/skupper/podman.yaml</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">platform</span>: <span style="color:#ae81ff">podman</span></span></span></code></pre></td></tr></table>
</div>
</div>


<ol start="3">
<li>Skupper Link is consumed from Vault using the podman Vault Token into a host variable named <code>public</code>.</li>
</ol>











  <div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="public-21"><a style="outline:none;text-decoration:none;color:inherit" href="#public-21">21</a>
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="public-22"><a style="outline:none;text-decoration:none;color:inherit" href="#public-22">22</a>
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="public-23"><a style="outline:none;text-decoration:none;color:inherit" href="#public-23">23</a>
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="public-24"><a style="outline:none;text-decoration:none;color:inherit" href="#public-24">24</a>
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="public-25"><a style="outline:none;text-decoration:none;color:inherit" href="#public-25">25</a>
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="public-26"><a style="outline:none;text-decoration:none;color:inherit" href="#public-26">26</a>
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="public-27"><a style="outline:none;text-decoration:none;color:inherit" href="#public-27">27</a>
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Consume public site link from Vault</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">community.hashi_vault.vault_read</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">url</span>: <span style="color:#ae81ff">http://127.0.0.1:8200</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">path</span>: <span style="color:#ae81ff">secret/data/public</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">auth_method</span>: <span style="color:#ae81ff">token </span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">token</span>: <span style="color:#e6db74">&#34;{{ lookup(&#39;file&#39;, vault_token) }}&#34;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">register</span>: <span style="color:#ae81ff">public</span></span></span></code></pre></td></tr></table>
</div>
</div>


<ol start="4">
<li>The consumed Skupper Link is created as a resource into the podman site definition.</li>
</ol>











  <div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="public-29"><a style="outline:none;text-decoration:none;color:inherit" href="#public-29">29</a>
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="public-30"><a style="outline:none;text-decoration:none;color:inherit" href="#public-30">30</a>
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="public-31"><a style="outline:none;text-decoration:none;color:inherit" href="#public-31">31</a>
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="public-32"><a style="outline:none;text-decoration:none;color:inherit" href="#public-32">32</a>
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Creating link to public</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">skupper.v2.resource</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">def</span>: <span style="color:#e6db74">&#34;{{ public.data.data.data.token }}&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">platform</span>: <span style="color:#ae81ff">podman</span></span></span></code></pre></td></tr></table>
</div>
</div>


<ol start="5">
<li>Finally the last task to perform is the Podman site initialization. Differently than Kubernetes sites, Non-kubernetes
sites must be statically initialized once all resources are placed.</li>
</ol>











  <div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="public-34"><a style="outline:none;text-decoration:none;color:inherit" href="#public-34">34</a>
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="public-35"><a style="outline:none;text-decoration:none;color:inherit" href="#public-35">35</a>
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="public-36"><a style="outline:none;text-decoration:none;color:inherit" href="#public-36">36</a>
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="public-37"><a style="outline:none;text-decoration:none;color:inherit" href="#public-37">37</a>
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Initialize podman site</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">skupper.v2.system</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">action</span>: <span style="color:#ae81ff">setup</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">platform</span>: <span style="color:#ae81ff">podman</span></span></span></code></pre></td></tr></table>
</div>
</div>


<h3 id="creating-each-site">Creating each site</h3>
<p>Now it is time to run the playbooks, as if they were run by different personas.
Here are the commands run the playbooks for each site:</p>
<ol>
<li>Public site</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ansible-playbook -i localhost, playbook-public.yaml -e vault_token<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>PWD<span style="color:#e6db74">}</span><span style="color:#e6db74">/public.token&#34;</span>
</span></span></code></pre></div><ol start="2">
<li>Private site</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ansible-playbook -i localhost, playbook-private.yaml -e vault_token<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>PWD<span style="color:#e6db74">}</span><span style="color:#e6db74">/private.token&#34;</span>
</span></span></code></pre></div><ol start="3">
<li>Podman site</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ansible-playbook -i localhost, playbook-podman.yaml -e vault_token<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>PWD<span style="color:#e6db74">}</span><span style="color:#e6db74">/podman.token&#34;</span>
</span></span></code></pre></div><h3 id="testing-the-application">Testing the application</h3>
<p>To validate that the application is running, you can run the following command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>kubectl -n public get site,listener
</span></span></code></pre></div><p>&hellip; until you see that:</p>
<ul>
<li><strong>SITES IN NETWORK</strong> equals to <strong>3</strong></li>
<li><strong>HAS MATCHING CONNECTOR</strong> is <strong>true</strong> for both listeners</li>
</ul>
<p>Then you can port-forward to the Front-End application and validate it through your browser:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>kubectl -n public port-forward deployment/frontend <span style="color:#ae81ff">8080</span>
</span></span></code></pre></div><p>Then open your browser and go to <code>http://127.0.0.1:8080</code>.</p>
<h4 id="clean-up">Clean up</h4>
<p>To clean up, you can download the following playbook: <a href="/posts/20250311-skupper-ansible-vault/resources/ansible/playbook-teardown.yaml">playbook-teardown.yaml</a>,
then execute:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ansible-playbook -i localhost, playbook-teardown.yaml
</span></span></code></pre></div><h2 id="conclusion">Conclusion</h2>
<p>When a single person or team can’t automate the entire Virtual Application Network (VAN) setup,
HashiCorp Vault provides an excellent solution for decentralizing its configuration.</p>
<p>It allows users to securely share and access Skupper Links via internal Vault paths,
with permissions tailored for reading or writing as needed.</p>
<p>This approach delivers fully independent administration for your VAN,
boosting flexibility and enabling automation that’s finely tuned to individual site configurations.</p>
]]></content>
        </item>
        
        <item>
            <title>Maintaining a Skupper network using Ansible</title>
            <link>https://fgiorgetti.github.io/posts/20250310-skupper-ansible-v2/</link>
            <pubDate>Mon, 10 Mar 2025 17:11:45 -0300</pubDate>
            
            <guid>https://fgiorgetti.github.io/posts/20250310-skupper-ansible-v2/</guid>
            <description>Introduction Skupper version 2.0.0 has landed and it&amp;rsquo;s bringing a shiny new Ansible collection with it, now available on Ansible Galaxy as skupper.v2.
This isn&amp;rsquo;t just another update, it&amp;rsquo;s a toolkit that empowers you to define and manage Skupper networks with ease, no matter where they run — Kubernetes, Podman, Docker, or bare-metal Linux.
Declarative power at your fingertips Skupper 2.0.0 redefines how Virtual Application Networks (VANs) come to life. At its core is a sleek, declarative approach powered by a fresh set of Kubernetes Custom Resource Definitions (CRDs).</description>
            <content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p><a href="https://skupper.io/v2/">Skupper version 2.0.0</a> has landed and it&rsquo;s bringing a shiny new Ansible collection with it,
now available on Ansible Galaxy as <a href="https://galaxy.ansible.com/ui/repo/published/skupper/v2/">skupper.v2</a>.</p>
<p><img src="/posts/20250310-skupper-ansible-v2/images/skupperv2-intro.png"></p>
<p>This isn&rsquo;t just another update, it&rsquo;s a toolkit that empowers you to define and manage Skupper networks with ease,
no matter where they run — Kubernetes, Podman, Docker, or bare-metal Linux.</p>
<h2 id="declarative-power-at-your-fingertips">Declarative power at your fingertips</h2>
<p><a href="https://skupper.io/v2/">Skupper 2.0.0</a> redefines how Virtual Application Networks (VANs) come to life.
At its core is a sleek, declarative approach powered by a fresh set of Kubernetes Custom Resource Definitions (CRDs). Think of it as a blueprint for your network: you describe what you want, and Skupper makes it happen.</p>
<p>These CRDs aren&rsquo;t just for Kubernetes users. They work just as seamlessly outside the Kubernetes ecosystem, delivering a unified, platform-agnostic way to declare and deploy your Skupper network.</p>
<h3 id="linking-sites">Linking Sites</h3>
<p>To build a <code>VAN</code> across multiple Skupper sites, you have to generate an <code>AccessToken</code> from one site —ideally a public or accessible hub—and share it with another. That token is the golden key that locks the sites into the same network, forging a secure, reliable mTLS Skupper Link to the hub.</p>
<p>Although this process is quite simple and easy to perform manually, when your environment scales, you will need some sort of automation to help you keeping your <code>VAN</code> linked and updated.</p>
<h2 id="new-ansible-collection">New Ansible collection</h2>
<p>The <a href="https://skupper.io/v2/"><strong>skupper.v2</strong> Ansible collection</a> introduces the final components needed to define your entire Virtual Application Network (VAN) in a scalable and streamlined way, saving significant time and ensuring reliable, consistent VAN configurations across all your sites.</p>
<h2 id="hands-on">Hands-on</h2>
<p>In order to demonstrate its power, we are going to create a Virtual Application Network that connects a simple Frontend
application which runs on a local Minikube cluster with a Backend microservice running on another namespace within the
same Minikube cluster.</p>
<blockquote>
<p><strong>NOTE</strong></p>
<p>This is just a minimal scenario, for an easy and local evaluation, that is why we are running the two applications within the same cluster. It is based on the <a href="https://github.com/skupperproject/skupper-example-yaml/tree/v2/">Hello World Example</a>.</p>
</blockquote>
<p><img src="/posts/20250310-skupper-ansible-v2/images/hello-world-v2.png"></p>
<h3 id="pre-requisites">Pre-requisites</h3>
<ul>
<li><a href="https://skupper.io/start/minikube.html">A minikube cluster</a></li>
<li>Minikube tunnel running</li>
<li>Ansible (&gt;= 2.15.0)</li>
<li>Install the <a href="https://galaxy.ansible.com/ui/repo/published/skupper/v2/">skupper.v2</a> Ansible collection and its dependent python modules
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ansible-galaxy collection install skupper.v2
</span></span><span style="display:flex;"><span>python -m pip install kubernetes PyYAML
</span></span></code></pre></div></li>
</ul>
<h3 id="how-it-works">How it works</h3>
<p>The goal here is to demonstrate how to setup a Skupper network using Ansible, to connect
kubernetes applications that are initially unable to reach each other.</p>
<p>Here&rsquo;s the <code>playbook.yaml</code> content that we will use for that:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span>---
</span></span><span style="display:flex;"><span>- <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Skupper V2 Hello World Example using Ansible</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">hosts</span>: <span style="color:#ae81ff">all</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">connection</span>: <span style="color:#ae81ff">local</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">tasks</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Create Kubernetes namespaces west and east</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">kubernetes.core.k8s</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">name</span>: <span style="color:#e6db74">&#34;{{ item }}&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">api_version</span>: <span style="color:#ae81ff">v1</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Namespace</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">state</span>: <span style="color:#ae81ff">present</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">loop</span>:
</span></span><span style="display:flex;"><span>        - <span style="color:#ae81ff">west</span>
</span></span><span style="display:flex;"><span>        - <span style="color:#ae81ff">east</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Install cluster scoped Skupper 2.0.0 into Kubernetes</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">kubernetes.core.k8s</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">state</span>: <span style="color:#ae81ff">present</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">definition</span>: <span style="color:#e6db74">&#34;{{ lookup(&#39;url&#39;, &#39;https://github.com/skupperproject/skupper/releases/download/2.0.0/skupper-cluster-scope.yaml&#39;, split_lines=False) }}&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Create resources on west namespace</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">skupper.v2.resource</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">path</span>: <span style="color:#e6db74">&#34;{{ item }}&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">namespace</span>: <span style="color:#ae81ff">west</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">loop</span>:
</span></span><span style="display:flex;"><span>        - <span style="color:#ae81ff">https://raw.githubusercontent.com/skupperproject/skupper-example-yaml/refs/heads/v2/west/site.yaml</span>
</span></span><span style="display:flex;"><span>        - <span style="color:#ae81ff">https://raw.githubusercontent.com/skupperproject/skupper-example-yaml/refs/heads/v2/west/listener.yaml</span>
</span></span><span style="display:flex;"><span>        - <span style="color:#ae81ff">https://raw.githubusercontent.com/skupperproject/skupper-example-yaml/refs/heads/v2/west/frontend.yaml</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Create resources on east namespace</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">skupper.v2.resource</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">path</span>: <span style="color:#e6db74">&#34;{{ item }}&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">namespace</span>: <span style="color:#ae81ff">east</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">loop</span>:
</span></span><span style="display:flex;"><span>        - <span style="color:#ae81ff">https://raw.githubusercontent.com/skupperproject/skupper-example-yaml/refs/heads/v2/east/site.yaml</span>
</span></span><span style="display:flex;"><span>        - <span style="color:#ae81ff">https://raw.githubusercontent.com/skupperproject/skupper-example-yaml/refs/heads/v2/east/connector.yaml</span>
</span></span><span style="display:flex;"><span>        - <span style="color:#ae81ff">https://raw.githubusercontent.com/skupperproject/skupper-example-yaml/refs/heads/v2/east/backend.yaml</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Generate an AccessToken to the west namespace</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">skupper.v2.token</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">name</span>: <span style="color:#ae81ff">west-grant</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">namespace</span>: <span style="color:#ae81ff">west</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">register</span>: <span style="color:#ae81ff">result</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Create AccessToken on east namespace</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">skupper.v2.resource</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">def</span>: <span style="color:#e6db74">&#34;{{ result.token }}&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">namespace</span>: <span style="color:#ae81ff">east</span>
</span></span></code></pre></div><blockquote>
<p><strong>NOTE</strong></p>
<p>This playbook relies on the <code>KUBECONFIG</code> environment variable to be properly set.</p>
</blockquote>
<p>Here is a breakdown of the tasks performed by the <code>playbook.yaml</code>:</p>
<ol>
<li>Create <code>west</code> and <code>east</code> namespaces</li>
<li>Install skupper 2.0.0 into the <code>skupper</code> namespace</li>
<li>Create the <code>west</code> namespace resources</li>
<li>Create the <code>east</code> namespace resources</li>
<li>Generate an <code>AccessToken</code> to the <code>west</code> namespace</li>
<li>Create <code>AccessToken</code> on <code>east</code> namespace</li>
</ol>
<blockquote>
<p><strong>IMPORTANT</strong>
The steps <strong>5</strong> and <strong>6</strong> solve the <a href="/posts/20250310-skupper-ansible-v2/#linking-sites">scalability issue for linking sites</a> in your Skupper Network.</p>
</blockquote>
<h2 id="running-the-example">Running the example</h2>
<ol>
<li>Open a terminal, set the KUBECONFIG environment variable to make sure you&rsquo;re using the
appropriate Kubernetes cluster.</li>
</ol>
<blockquote>
<p><strong>WARNING</strong></p>
<p>This example creates and modifies three namespaces on your Kubernetes cluster:</p>
<ul>
<li><code>skupper</code>,</li>
<li><code>west</code> and</li>
<li><code>east</code></li>
</ul>
<p>In case any of these namespaces exist in your cluster, <strong>do not proceed</strong>, unless you know what you&rsquo;re doing.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>kubectl get namespace | grep -E <span style="color:#e6db74">&#39;(skupper|west|east)&#39;</span>
</span></span></code></pre></div></blockquote>
<ol start="2">
<li>
<p>Next download the <a href="/posts/20250310-skupper-ansible-v2/resources/playbook.yaml"><code>playbook.yaml</code></a> to an appropriate location in your file system.</p>
</li>
<li>
<p>Run the Ansible playbook</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ansible-playbook -i localhost, playbook.yaml
</span></span></code></pre></div></li>
<li>
<p>Verify that the Front-end application is working</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>kubectl -n west port-forward deployment/frontend <span style="color:#ae81ff">8080</span>
</span></span></code></pre></div></li>
<li>
<p>Open your browser and go to <code>http://localhost:8080</code></p>
</li>
<li>
<p>Test the application</p>
</li>
</ol>
<p>If you want to clean things up, you can delete the: <code>west</code>, <code>east</code> and <code>skupper</code> namespaces.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>kubectl delete namespace west east skupper
</span></span></code></pre></div><h2 id="summary">Summary</h2>
<p><a href="https://skupper.io/v2/">Skupper</a> simplifies the connection of your applications using secure mTLS links between Skupper sites, eliminating the need for elevated privileges or network modifications.</p>
<p>This new version standardizes the Virtual Application Network (VAN) definition, enabling you to declare your VAN in advance, precisely specifying what is exposed internally within the VAN and where each workload will be consumed.</p>
<p>The <a href="https://galaxy.ansible.com/ui/repo/published/skupper/v2/"><strong>skupper.v2</strong> Ansible collection</a> streamlines the definition of Skupper resources, regardless of the target platform for your Skupper site, offering a highly convenient mechanism to link sites—regardless of VAN size—while reducing significant effort and maintaining consistency across your VAN.</p>
]]></content>
        </item>
        
        <item>
            <title>Skupper service ingress through containers</title>
            <link>https://fgiorgetti.github.io/posts/20240322-skupper-podman-ingresses/</link>
            <pubDate>Fri, 22 Mar 2024 16:19:33 -0300</pubDate>
            
            <guid>https://fgiorgetti.github.io/posts/20240322-skupper-podman-ingresses/</guid>
            <description>Introduction In order to evaluate some strategies for dealing with ingresses using a stable name resolution within a container network (Podman or Docker), I have used the following scenario as the foundation for this study:
In the following sections, I will describe each component in more detail.
Artifacts for each strategy are also available and they can be easily executed using podman-compose or docker compose.
Service Proxies The service proxies are the main objects to be explored here.</description>
            <content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>In order to evaluate some strategies for dealing with ingresses using a stable
name resolution within a container network (Podman or Docker), I have used the
following scenario as the foundation for this study:</p>
<p><img src="/posts/20240322-skupper-podman-ingresses/images/scenario.png"></p>
<p>In the following sections, I will describe each component in more detail.</p>
<p>Artifacts for each strategy are also available and they can be easily executed
using <em>podman-compose</em> or <em>docker compose</em>.</p>
<h3 id="service-proxies">Service Proxies</h3>
<p>The service proxies are the main objects to be explored here.</p>
<p>Each service proxy is connected to a container network, and so they have a stable
name and an individual IP address within that network. With that, each proxy container
could bind port 8080 (as an example), because they&rsquo;d have different IP addresses.</p>
<p>And this is the reason why we do not have a single proxy container with multiple
network aliases. Having multiple network aliases would solve the stable name issue,
but wouldn&rsquo;t allow two distinct names to bind the same port with different targets.</p>
<p>That being said, each proxy container will be responsible for redirecting incoming traffic
reaching its port(s) to the <em>skupper-router</em> (explained later).</p>
<p>In this study we will evaluate different approaches that can be used to redirect
incoming traffic reaching the service proxies to the <em>skupper-router</em>.</p>
<p>Basically all the scenarios will use different approaches to redirect traffic to the listeners
exposed by the <em>skupper_router</em>, except for the <em>Edge-Router</em> scenario, in which the service proxies
are edge-routers connected to the <em>skupper-router</em> and they expose a <em>TCP Listener</em> themselves.
These <em>TCP Listeners</em> take the incoming traffic through the <em>skupper-router</em> via its
<em>Edge Link</em> with <em>skupper-router</em>, so the <em>TCP Listeners</em> exposed by the <em>skupper-router</em>
are not used.</p>
<h3 id="skupper-router">Skupper Router</h3>
<p>The <em>skupper-router</em> component is connect to the host network, exposing TCP listeners
on ports <em>8080</em> and <em>5201</em>, which have related TCP connectors reaching the <em>workloads</em>,
that are also running as containers, exposing their ports to the host network.</p>
<p>It is important to say that this is not an appropriate scenario for Skupper itself, as
Skupper&rsquo;s purpose is to interconnect services distributed through the hybrid cloud, but
we are using it here to prove that we can get traffic from a service proxy redirected to
the <em>skupper-router</em> and forwarded by the router to the respective <em>workloads</em>.</p>
<p>In the <em>Edge-Router</em> scenario, the <em>skupper-router</em> also exposes an <em><strong>Edge</strong></em> listener
through port 45671. This listener is used by the <em>service proxies</em> only in this scenario.</p>
<h3 id="workloads">Workloads</h3>
<p>In this topology we have two workloads.</p>
<ul>
<li><em>my-service</em> - nginx server</li>
<li><em>my-tcp-service</em> - iperf3 server</li>
</ul>
<p>These workloads also run as containers and their ports exposed through the host machine and
mapping incoming traffic to the appropriate port used by the workload itself, here is the mapping:</p>
<ul>
<li><em>my-service</em> - Host port 8888 to container port 8080</li>
<li><em>my-tcp-service</em> - Host port 4201 to container port 5201</li>
</ul>
<p>The <em>skupper-router</em> container has two TCP Connectors, one for each port, and the connectors
use the following configuration:</p>
<table>
<thead>
<tr>
<th>Target host</th>
<th>Target port</th>
<th>Routing key (address)</th>
</tr>
</thead>
<tbody>
<tr>
<td>host.docker.internal</td>
<td>8888</td>
<td>my-service:8080</td>
</tr>
<tr>
<td>host.docker.internal</td>
<td>4201</td>
<td>my-tcp-service:5201</td>
</tr>
</tbody>
</table>
<h2 id="service-proxy-scenarios">Service proxy scenarios</h2>
<ol>
<li>Netfilter / iptables</li>
<li>Edge-router</li>
<li>HA proxy</li>
<li>Envoy proxy</li>
</ol>
<h3 id="1-netfilter">1. Netfilter</h3>
<p>Using Netfilter (iptables), we can simply add rules to redirect incoming packets reaching the
proxy containers (i.e: <em>my-service:8080</em> and <em>my-tcp-service:5201</em>), to the respective
host ports that are bound by the <em>skupper-router</em>.</p>
<p>This is a simple solution as it just relies on an ubi9 image with iptables installed. It also seems
to be the fastest choice with minimal resource utilization, compared to the other approaches.</p>
<h3 id="2-edge-router">2. Edge-router</h3>
<p>An edge-router can also be used, as we just need to expose a tcpListener on each container
with the respective routing key (address) that will reach the target workloads.</p>
<p>This approach has an extra benefit (to be evaluated) as you don&rsquo;t need to expose the workloads to the
container&rsquo;s host network (no TCP listener needed on the <em>skupper-router</em>), because it does not need a target
IP and Port.</p>
<p>Each service proxy runs as an edge-router and has an edge link to the <em>skupper-router</em>, which
targets host: host.docker.internal and port 45671.</p>
<h3 id="3-haproxy">3. HAProxy</h3>
<p>The HAProxy can be configured as a reverse proxy, forwarding packets to the router
ingress IP and Port. HAProxy is also used by Openshift to provide Route ingress.</p>
<h3 id="4-envoy-proxy">4. Envoy Proxy</h3>
<p>Envoy proxy can be configured similarly to HAProxy. It is a safe, popular and reliable
alternative to be evaluated as well.</p>
<h2 id="artifacts-for-evaluation">Artifacts for evaluation</h2>
<p>You can download and evaluate each of the approaches through the following links.
These samples can be run using <code>docker compose</code> or <code>podman-compose</code>.</p>
<p><a href="/posts/20240322-skupper-podman-ingresses/resources/netfilter.tar.gz">1. Netfilter</a></p>
<p><a href="/posts/20240322-skupper-podman-ingresses/resources/edgerouter.tar.gz">2. Edge-Router</a></p>
<p><a href="/posts/20240322-skupper-podman-ingresses/resources/haproxy.tar.gz">3. HAProxy</a></p>
<p><a href="/posts/20240322-skupper-podman-ingresses/resources/envoy.tar.gz">4. Envoy</a></p>
<h2 id="validating-each-scenario">Validating each scenario</h2>
<table>
<thead>
<tr>
<th>Container engine</th>
<th>Deploy</th>
<th>Teardown</th>
<th>Environemnt</th>
</tr>
</thead>
<tbody>
<tr>
<td>Podman</td>
<td>podman-compose up -d</td>
<td>podman-compose down</td>
<td>CONTAINER=podman</td>
</tr>
<tr>
<td>Docker</td>
<td>docker compose up -d</td>
<td>docker compose down</td>
<td>CONTAINER=docker</td>
</tr>
</tbody>
</table>
<p>For each scenario, you can validate that you&rsquo;re able to access the target services through
Host&rsquo;s port 8080 (HTTP) and 5201 (TCP) as well as through the container&rsquo;s bridge network (<em>sample_sample1</em>),
through <em>my-service:8080</em> and <em>my-tcp-service:5201</em>.</p>
<h3 id="http">HTTP</h3>
<ol>
<li>Access through the host:</li>
</ol>
<p><code>CLIENT -&gt; ROUTER -&gt; WORKLOAD</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>curl http://0.0.0.0:8080
</span></span></code></pre></div><ol start="2">
<li>Access through the container&rsquo;s bridge network</li>
</ol>
<p><code>CLIENT -&gt; PROXY -&gt; ROUTER -&gt; WORKLOAD</code></p>
<p><em>Note:</em> The proxy can be one of: netfilter, edge-router, haproxy or envoy.</p>
<p>First adjust the value of the CONTAINER variable to the container engine being used (podman or docker).</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>CONTAINER<span style="color:#f92672">=</span>podman
</span></span><span style="display:flex;"><span><span style="color:#e6db74">${</span>CONTAINER<span style="color:#e6db74">}</span> run --rm --network sample_sample1 curlimages/curl http://my-service:8080
</span></span></code></pre></div><p>If you want to run a basic HTTP performance test (runs for 10s with 1 client and 10 connections),
you could also use:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>CONTAINER<span style="color:#f92672">=</span>podman
</span></span><span style="display:flex;"><span><span style="color:#e6db74">${</span>CONTAINER<span style="color:#e6db74">}</span> run --rm --network sample_sample1 quay.io/skupper/wrk wrk -d 10s -c <span style="color:#ae81ff">10</span> -t <span style="color:#ae81ff">1</span> --latency http://my-service:8080
</span></span></code></pre></div><h3 id="tcp">TCP</h3>
<ol>
<li>Access through the host:</li>
</ol>
<p><code>CLIENT -&gt; ROUTER -&gt; WORKLOAD</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>iperf3 -c 0.0.0.0
</span></span></code></pre></div><ol start="2">
<li>Access through the container&rsquo;s bridge network (with name resolution):</li>
</ol>
<p><code>CLIENT -&gt; PROXY -&gt; ROUTER -&gt; WORKLOAD</code></p>
<p><em>Note:</em> The proxy can be one of: netfilter, edge-router, haproxy or envoy.</p>
<p>First adjust the value of the CONTAINER variable to the container engine being used (podman or docker).</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>CONTAINER<span style="color:#f92672">=</span>podman
</span></span><span style="display:flex;"><span><span style="color:#e6db74">${</span>CONTAINER<span style="color:#e6db74">}</span> run --rm --network sample_sample1 quay.io/skupper/iperf3 -c my-tcp-service
</span></span></code></pre></div><h2 id="conclusion">Conclusion</h2>
<p>If requiring a host&rsquo;s IP/Port to be exposed is not a problem, the Netfilter/iptables approach
seems like the best fit as it requires few resources and seems to have best throughput.</p>
<p>But in case exposing workloads only into the container&rsquo;s network, without exposing them through the
host&rsquo;s IP and Port, is a mandatory thing, then Edge-router is the only choice that can be used.</p>
<p>As an upcoming activity, it would be really interesting to do a performance analysis, comparing all the
approaches mentioned here using both TCP (iperf3) and HTTP traffic.</p>
]]></content>
        </item>
        
        <item>
            <title>Playing with kube files using Podman</title>
            <link>https://fgiorgetti.github.io/posts/20240319-podman-kube-play/</link>
            <pubDate>Tue, 19 Mar 2024 10:19:00 -0300</pubDate>
            
            <guid>https://fgiorgetti.github.io/posts/20240319-podman-kube-play/</guid>
            <description>The goal of this exercise is to create two skupper-router containers named skupper-router-east and skupper-router-west with Podman, exposing a TLS AMQP listener on the east router, with all generated credentials and router configuration included as Kubernetes descriptors (using YAML), so that these YAML files can be loaded with podman kube play to spin up the two router pods.
All files mentioned here, can be found below.
Deploying this sample To deploy this sample, run: .</description>
            <content type="html"><![CDATA[<p>The goal of this exercise is to create two skupper-router containers named skupper-router-east and skupper-router-west
with Podman, exposing a TLS AMQP listener on the east router, with all generated credentials
and router configuration included as Kubernetes descriptors (using YAML), so that these YAML
files can be loaded with <code>podman kube play</code> to spin up the two router pods.</p>
<p>All files mentioned here, can be found below.</p>
<h2 id="deploying-this-sample">Deploying this sample</h2>
<p>To deploy this sample, run: <code>./play.sh</code>, or execute:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>podman network create skupper-router-sample
</span></span><span style="display:flex;"><span>podman kube play --userns<span style="color:#f92672">=</span>keep-id --network<span style="color:#f92672">=</span>skupper-router-sample skupper-router-east-west.yaml
</span></span></code></pre></div><p>When you run this sample, a podman network (mode: bridge) named <code>skupper-router-sample</code> will
be created.</p>
<p>Once the network is created, <code>podman kube play</code> will be invoked to process the YAML
file named <code>skupper-router-east-west.yaml</code>.</p>
<p>This will run two pods (with one container each), named respectively:</p>
<ul>
<li>skupper-router-east-pod / skupper-router-east-pod-skupper-router-east</li>
<li>skupper-router-west-pod / skupper-router-west-pod-skupper-router-west</li>
</ul>
<p>The east container uses a TLS certificate which is valid for the host <code>skupper-router-east</code>,
which is a valid host within the generated podman network.</p>
<p>The west container uses a TLS certificate generated by the same CA for authentication.</p>
<h2 id="teardown">Teardown</h2>
<p>To remove all the created pods and network, run: <code>./down.sh</code>, or execute:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>podman kube down --force skupper-router-east-west.yaml
</span></span><span style="display:flex;"><span>podman network rm --force skupper-router-sample
</span></span></code></pre></div><p>The script will basically run <code>podman kube down --force skupper-router-east-west.yaml</code> and
will also remove the podman network that has been created earlier.</p>
<h2 id="resources">Resources:</h2>
<ul>
<li><a href="/posts/20240319-podman-kube-play/skupper-router-east-west.yaml">skupper-router-east-west.yaml</a></li>
<li><a href="/posts/20240319-podman-kube-play/play.sh">play.sh</a></li>
<li><a href="/posts/20240319-podman-kube-play/down.sh">down.sh</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Skupper Network Deployment using Ansible</title>
            <link>https://fgiorgetti.github.io/posts/20221117-skupper-network-deployment/</link>
            <pubDate>Thu, 17 Nov 2022 16:13:04 -0300</pubDate>
            
            <guid>https://fgiorgetti.github.io/posts/20221117-skupper-network-deployment/</guid>
            <description>I have prepared the following video demonstrating a new approach to set up your Skupper network using Ansible.
The example demonstrated in the video, can be found at: https://github.com/skupperproject/skupper-ansible/tree/main/examples/hello-world</description>
            <content type="html"><![CDATA[<p>I have prepared the following video demonstrating a new approach to set up your
Skupper network using Ansible.</p>
<p>The example demonstrated in the video, can be found at:
<a href="https://github.com/skupperproject/skupper-ansible/tree/main/examples/hello-world">https://github.com/skupperproject/skupper-ansible/tree/main/examples/hello-world</a></p>


    
    <div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
      <iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/7H0lhjloiTA?autoplay=0&controls=1&end=0&loop=0&mute=0&start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"
      ></iframe>
    </div>

]]></content>
        </item>
        
        <item>
            <title>File Watcher With Fsnotify</title>
            <link>https://fgiorgetti.github.io/posts/20220823-file-watcher-with-fsnotify/</link>
            <pubDate>Tue, 23 Aug 2022 00:21:47 -0300</pubDate>
            
            <guid>https://fgiorgetti.github.io/posts/20220823-file-watcher-with-fsnotify/</guid>
            <description>Sometimes we need to watch for modifications in specific locations in the filesystem, reacting to them differently.
As an example, an alert could be triggered if a specific file is modified or a backup procedure could start as new files are created into specific directories.
There are several tools and libraries to help doing that, but since I am evaluating libraries in Go, I have decided to play with fsnotify and write a bit about it.</description>
            <content type="html"><![CDATA[<p>Sometimes we need to watch for modifications in specific locations in
the filesystem, reacting to them differently.</p>
<p>As an example, an alert could be triggered if a specific file is modified
or a backup procedure could start as new files are created into specific
directories.</p>
<p>There are several tools and libraries to help doing that, but since I am
evaluating libraries in Go, I have decided to play with <a href="https://github.com/fsnotify/fsnotify">fsnotify</a> and write a bit about it.</p>
<h2 id="fsnotify">fsnotify</h2>
<p>It is a library written in Go that uses <a href="https://pkg.go.dev/golang.org/x/sys">https://pkg.go.dev/golang.org/x/sys</a> instead of
<a href="https://pkg.go.dev/syscall">https://pkg.go.dev/syscall</a> (from the standard library).</p>
<p>Fsnotify is supported on Linux, macOS, Windows and other operating systems.</p>
<p>With fsnotify you can create a <code>Watcher</code> instance that will emit a notification <code>Event</code>
for all files or directories (not recursively) added to it.</p>
<h2 id="goal">Goal</h2>
<p>Define a simple interface that provides a common mechanism for reacting to
changes notified against a specific file or directory.</p>
<p>Basically we will a pass specific location to be monitored by <code>fsnotify</code>.</p>
<p>This location can be an existing file, directory or even a new location in
the file system that may still not yet exist.</p>
<h2 id="quick-start">Quick start</h2>
<p>First thing we need to know is how to use the Watcher provided by fsnotify.
Code must import <code>github.com/fsnotify/fsnotify</code> and create a <code>fsnotify.Watcher</code> instance.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">watcher</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">fsnotify</span>.<span style="color:#a6e22e">NewWatcher</span>()
</span></span></code></pre></div><p>After that you must add target files or directories to watch, like:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">watcher</span>.<span style="color:#a6e22e">Add</span>(<span style="color:#a6e22e">filename</span>)
</span></span></code></pre></div><p>One important thing to mention here is that you must pass an existing file
or directory to be watched.</p>
<p>If you pass an invalid filename, fsnotify will report an error saying:
&ldquo;<code>no such file or directory</code>&rdquo;.</p>
<p>To get around that, our implementation will also validate if the given file
or directory exists and otherwise it will try to add the named file to the
Watcher instance till it returns no error.</p>
<p>The notification events are sent to a channel named <code>Events</code> in the <code>Watcher</code>
instance and it has a property named <code>Op</code> that represents a file operation.</p>
<p>To validate the correct operation being notified you have to perform a bitwise
<strong><code>&amp;</code></strong> (<strong>AND</strong>) operation against fsnotify generalized operations and validate
that the result matches it. As an example, to validate if a given event notification
refers to a new file or directory being created you can do:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">event</span>.<span style="color:#a6e22e">Op</span><span style="color:#f92672">&amp;</span><span style="color:#a6e22e">fsnotify</span>.<span style="color:#a6e22e">Create</span> <span style="color:#f92672">==</span> <span style="color:#a6e22e">fsnotify</span>.<span style="color:#a6e22e">Create</span>
</span></span></code></pre></div><p>With that we know what are the basics to write our own interface that helps reacting
to file system modifications more easily.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">FSChangeHandler</span> <span style="color:#66d9ef">interface</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">OnCreate</span>(<span style="color:#66d9ef">string</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">OnUpdate</span>(<span style="color:#66d9ef">string</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">OnRemove</span>(<span style="color:#66d9ef">string</span>)
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>We can customize how to react to certain events more easily and leave the communication
with <code>fsnotify</code> to be handled by an internal component.</p>
<p>In order to achieve that, the sample code will offer the following function:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">NewWatcher</span>(<span style="color:#a6e22e">name</span> <span style="color:#66d9ef">string</span>, <span style="color:#a6e22e">stopCh</span> <span style="color:#66d9ef">chan</span> <span style="color:#66d9ef">bool</span>, <span style="color:#a6e22e">handler</span> <span style="color:#a6e22e">FSChangeHandler</span>) <span style="color:#66d9ef">error</span>
</span></span></code></pre></div><p>Then you can use it as you need and simply provide multiple implementations to react
to specific events differently.</p>
<h2 id="solution">Solution</h2>
<h3 id="watchergo">watcher.go</h3>
<p>Here we have the NewWatcher function that uses watchCreated to wait for new file
or directory to be created and it will use the <code>FSChangeHandler</code> interface to notify
events accordignly.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#f92672">package</span> <span style="color:#a6e22e">watcher</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> (
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;log&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;os&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;time&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;github.com/fsnotify/fsnotify&#34;</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">FSChangeHandler</span> <span style="color:#66d9ef">interface</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">OnCreate</span>(<span style="color:#66d9ef">string</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">OnUpdate</span>(<span style="color:#66d9ef">string</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">OnRemove</span>(<span style="color:#66d9ef">string</span>)
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">watchCreated</span>(<span style="color:#a6e22e">watcher</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">fsnotify</span>.<span style="color:#a6e22e">Watcher</span>, <span style="color:#a6e22e">name</span> <span style="color:#66d9ef">string</span>) {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Printf</span>(<span style="color:#e6db74">&#34;-&gt; waiting for %s to exist&#34;</span>, <span style="color:#a6e22e">name</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">go</span> <span style="color:#66d9ef">func</span>() {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">ticker</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Tick</span>(<span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Second</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">for</span> {
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">select</span> {
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">case</span> <span style="color:#f92672">&lt;-</span><span style="color:#a6e22e">ticker</span>:
</span></span><span style="display:flex;"><span>				<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">watcher</span>.<span style="color:#a6e22e">Add</span>(<span style="color:#a6e22e">name</span>); <span style="color:#a6e22e">err</span> <span style="color:#f92672">==</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>					<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Printf</span>(<span style="color:#e6db74">&#34;-&gt; now it exists: %s&#34;</span>, <span style="color:#a6e22e">name</span>)
</span></span><span style="display:flex;"><span>					<span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>				}
</span></span><span style="display:flex;"><span>			}
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>	}()
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">NewWatcher</span>(<span style="color:#a6e22e">name</span> <span style="color:#66d9ef">string</span>, <span style="color:#a6e22e">stopCh</span> <span style="color:#66d9ef">chan</span> <span style="color:#66d9ef">bool</span>, <span style="color:#a6e22e">handler</span> <span style="color:#a6e22e">FSChangeHandler</span>) <span style="color:#66d9ef">error</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Printf</span>(<span style="color:#e6db74">&#34;Creating watcher for: %s&#34;</span>, <span style="color:#a6e22e">name</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">watcher</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">fsnotify</span>.<span style="color:#a6e22e">NewWatcher</span>()
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">err</span>
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Stat</span>(<span style="color:#a6e22e">name</span>); <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">IsNotExist</span>(<span style="color:#a6e22e">err</span>) {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">watchCreated</span>(<span style="color:#a6e22e">watcher</span>, <span style="color:#a6e22e">name</span>)
</span></span><span style="display:flex;"><span>	} <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">watcher</span>.<span style="color:#a6e22e">Add</span>(<span style="color:#a6e22e">name</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">go</span> <span style="color:#66d9ef">func</span>() {
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">for</span> {
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">select</span> {
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">case</span> <span style="color:#a6e22e">event</span> <span style="color:#f92672">:=</span> <span style="color:#f92672">&lt;-</span><span style="color:#a6e22e">watcher</span>.<span style="color:#a6e22e">Events</span>:
</span></span><span style="display:flex;"><span>				<span style="color:#66d9ef">switch</span> {
</span></span><span style="display:flex;"><span>				<span style="color:#75715e">// useful for new files when watching directories
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>				<span style="color:#66d9ef">case</span> <span style="color:#a6e22e">event</span>.<span style="color:#a6e22e">Op</span><span style="color:#f92672">&amp;</span><span style="color:#a6e22e">fsnotify</span>.<span style="color:#a6e22e">Create</span> <span style="color:#f92672">==</span> <span style="color:#a6e22e">fsnotify</span>.<span style="color:#a6e22e">Create</span>:
</span></span><span style="display:flex;"><span>					<span style="color:#a6e22e">handler</span>.<span style="color:#a6e22e">OnCreate</span>(<span style="color:#a6e22e">event</span>.<span style="color:#a6e22e">Name</span>)
</span></span><span style="display:flex;"><span>				<span style="color:#66d9ef">case</span> <span style="color:#a6e22e">event</span>.<span style="color:#a6e22e">Op</span><span style="color:#f92672">&amp;</span><span style="color:#a6e22e">fsnotify</span>.<span style="color:#a6e22e">Write</span> <span style="color:#f92672">==</span> <span style="color:#a6e22e">fsnotify</span>.<span style="color:#a6e22e">Write</span>:
</span></span><span style="display:flex;"><span>					<span style="color:#a6e22e">handler</span>.<span style="color:#a6e22e">OnUpdate</span>(<span style="color:#a6e22e">event</span>.<span style="color:#a6e22e">Name</span>)
</span></span><span style="display:flex;"><span>				<span style="color:#66d9ef">case</span> <span style="color:#a6e22e">event</span>.<span style="color:#a6e22e">Op</span><span style="color:#f92672">&amp;</span><span style="color:#a6e22e">fsnotify</span>.<span style="color:#a6e22e">Remove</span> <span style="color:#f92672">==</span> <span style="color:#a6e22e">fsnotify</span>.<span style="color:#a6e22e">Remove</span>:
</span></span><span style="display:flex;"><span>					<span style="color:#a6e22e">handler</span>.<span style="color:#a6e22e">OnRemove</span>(<span style="color:#a6e22e">event</span>.<span style="color:#a6e22e">Name</span>)
</span></span><span style="display:flex;"><span>					<span style="color:#75715e">// object being watched removed, watch for it to show up again
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>					<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">event</span>.<span style="color:#a6e22e">Name</span> <span style="color:#f92672">==</span> <span style="color:#a6e22e">name</span> {
</span></span><span style="display:flex;"><span>						<span style="color:#a6e22e">watcher</span>.<span style="color:#a6e22e">Remove</span>(<span style="color:#a6e22e">name</span>)
</span></span><span style="display:flex;"><span>						<span style="color:#a6e22e">watchCreated</span>(<span style="color:#a6e22e">watcher</span>, <span style="color:#a6e22e">name</span>)
</span></span><span style="display:flex;"><span>					}
</span></span><span style="display:flex;"><span>				}
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">case</span> <span style="color:#f92672">&lt;-</span><span style="color:#a6e22e">stopCh</span>:
</span></span><span style="display:flex;"><span>				<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Printf</span>(<span style="color:#e6db74">&#34;Done watching: %s&#34;</span>, <span style="color:#a6e22e">name</span>)
</span></span><span style="display:flex;"><span>				<span style="color:#a6e22e">watcher</span>.<span style="color:#a6e22e">Close</span>()
</span></span><span style="display:flex;"><span>				<span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>			}
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>	}()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">nil</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="fwgo">fw.go</h3>
<p>Here is a sample usage of the watcher presented earlier.
It provides a <code>FSChangeHandler</code> implementation that simply displays
the event type that has just been triggered and the filename.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#f92672">package</span> <span style="color:#a6e22e">main</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> (
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;fmt&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;log&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;os&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;time&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;github.com/fgiorgetti/go-playground/filewatcher/pkg/watcher&#34;</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">MyHandler</span> <span style="color:#66d9ef">struct</span> {
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">m</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">MyHandler</span>) <span style="color:#a6e22e">OnCreate</span>(<span style="color:#a6e22e">name</span> <span style="color:#66d9ef">string</span>) {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Printf</span>(<span style="color:#e6db74">&#34;File has been created: %s&#34;</span>, <span style="color:#a6e22e">name</span>)
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">m</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">MyHandler</span>) <span style="color:#a6e22e">OnUpdate</span>(<span style="color:#a6e22e">name</span> <span style="color:#66d9ef">string</span>) {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Printf</span>(<span style="color:#e6db74">&#34;File has been updated: %s&#34;</span>, <span style="color:#a6e22e">name</span>)
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">m</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">MyHandler</span>) <span style="color:#a6e22e">OnRemove</span>(<span style="color:#a6e22e">name</span> <span style="color:#66d9ef">string</span>) {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Printf</span>(<span style="color:#e6db74">&#34;File has been removed: %s&#34;</span>, <span style="color:#a6e22e">name</span>)
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">stopCh</span> <span style="color:#f92672">:=</span> make(<span style="color:#66d9ef">chan</span> <span style="color:#66d9ef">bool</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> len(<span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Args</span>) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">2</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatalf</span>(<span style="color:#e6db74">&#34;Use: %s file_or_directory&#34;</span>, <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Args</span>[<span style="color:#ae81ff">0</span>])
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">fileOrDir</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Args</span>[<span style="color:#ae81ff">1</span>]
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">watcher</span>.<span style="color:#a6e22e">NewWatcher</span>(<span style="color:#a6e22e">fileOrDir</span>, <span style="color:#a6e22e">stopCh</span>, <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">MyHandler</span>{})
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatalf</span>(<span style="color:#e6db74">&#34;Error creating watcher: %v&#34;</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// var done string
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;Press ENTER when done&#34;</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">_</span> = <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Scanln</span>()
</span></span><span style="display:flex;"><span>	close(<span style="color:#a6e22e">stopCh</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Sleep</span>(<span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Second</span>)
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="running">Running</h3>
<p>To run it you must pass a single target file to be watched.
Remember it may or may not exist.</p>
<p>In a separate terminal you can play with modifications to the respective file.</p>
<p>Once you&rsquo;re done with it, just press ENTER in the terminal where the watcher
is running.</p>
<p>Example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>go run fw.go /tmp/sample-location
</span></span></code></pre></div><p>It will show you something like:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>2022/08/23 12:26:52 Creating watcher <span style="color:#66d9ef">for</span>: /tmp/sample-location
</span></span><span style="display:flex;"><span>2022/08/23 12:26:52 -&gt; waiting <span style="color:#66d9ef">for</span> /tmp/sample-location to exist
</span></span><span style="display:flex;"><span>Press ENTER when <span style="color:#66d9ef">done</span>
</span></span></code></pre></div><p>In another terminal you can create a file and add more content to it, like:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>echo <span style="color:#e6db74">&#34;some data&#34;</span> &gt;&gt; /tmp/sample-location
</span></span><span style="display:flex;"><span>echo <span style="color:#e6db74">&#34;some more data&#34;</span> &gt;&gt; /tmp/sample-location
</span></span></code></pre></div><p>Then in the main terminal you will see:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>2022/08/23 12:27:07 -&gt; now it exists: /tmp/sample-location
</span></span><span style="display:flex;"><span>2022/08/23 12:28:40 File has been updated: /tmp/sample-location
</span></span></code></pre></div><p>Remove the file now:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>rm /tmp/sample-location
</span></span></code></pre></div><p>And in the main terminal you should see:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>2022/08/23 12:29:56 File has been removed: /tmp/sample-location
</span></span><span style="display:flex;"><span>2022/08/23 12:29:56 -&gt; waiting <span style="color:#66d9ef">for</span> /tmp/sample-location to exist
</span></span></code></pre></div><p>Next, create the target <code>/tmp/sample-location</code> as a directory and
create a file inside it with some sample content:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>mkdir /tmp/sample-location
</span></span><span style="display:flex;"><span>echo <span style="color:#e6db74">&#34;some data&#34;</span> &gt;&gt; /tmp/sample-location/file1
</span></span></code></pre></div><p>You should see:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>2022/08/23 12:31:18 -&gt; now it exists: /tmp/sample-location
</span></span><span style="display:flex;"><span>2022/08/23 12:31:40 File has been created: /tmp/sample-location/file1
</span></span><span style="display:flex;"><span>2022/08/23 12:31:40 File has been updated: /tmp/sample-location/file1
</span></span></code></pre></div><p>I hope you find it useful.</p>
<h2 id="system-information">System information</h2>
<p>FSNotify v1.5.4
OS: Fedora 36
Go: 1.19</p>
<h2 id="references">References</h2>
<ul>
<li><a href="https://github.com/fsnotify/fsnotify/tree/v1.5.4">fsnotify source code</a></li>
<li><a href="https://pkg.go.dev/github.com/fsnotify/fsnotify">fsnotify documentation</a></li>
<li><a href="https://github.com/fgiorgetti/go-playground/tree/main/filewatcher">source code used here</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Golang Bash Completion with Cobra API</title>
            <link>https://fgiorgetti.github.io/posts/20210203-golang-bash-completion/</link>
            <pubDate>Wed, 03 Feb 2021 17:15:08 -0300</pubDate>
            
            <guid>https://fgiorgetti.github.io/posts/20210203-golang-bash-completion/</guid>
            <description>In this post, I am going to share an example that demonstrates how to use bash completion with a Golang application that uses Cobra, a library to help writing Command Line Interface (CLI) apps.
Source repository You can find the sources mentioned in this example at the following Git Repository.
Pre-requisites You must have the following packages (assuming you&amp;rsquo;re on Linux) and commands available:
go (1.15+) bash bash-completion base64 make The example application The code in the repository above demonstrates a very basic (and, let&amp;rsquo;s say, not so useful) application called bashcomp that handles the following commands:</description>
            <content type="html"><![CDATA[<p>In this post, I am going to share an example that demonstrates how to use bash completion with a Golang
application that uses <a href="https://github.com/spf13/cobra">Cobra</a>, a library to help writing Command Line Interface (CLI) apps.</p>
<h2 id="source-repository">Source repository</h2>
<p>You can find the sources mentioned in this example at the following <a href="https://github.com/fgiorgetti/go-playground/tree/main/bashcomp">Git Repository</a>.</p>
<h2 id="pre-requisites">Pre-requisites</h2>
<p>You must have the following packages (assuming you&rsquo;re on Linux) and
commands available:</p>
<ul>
<li>go (1.15+)</li>
<li>bash</li>
<li>bash-completion</li>
<li>base64</li>
<li>make</li>
</ul>
<h2 id="the-example-application">The example application</h2>
<p>The code in the repository above demonstrates a very basic (and, let&rsquo;s say, not so useful) application
called <code>bashcomp</code> that handles the following commands:</p>
<h3 id="hello">hello</h3>
<pre tabindex="0"><code>$ bashcomp hello Bash
Hello my dear Bash
</code></pre><h3 id="goodbye">goodbye</h3>
<pre tabindex="0"><code>$ bashcomp goodbye Bash
Goodbye fellow Bash
</code></pre><h3 id="thanks">thanks</h3>
<pre tabindex="0"><code>$ bashcomp thanks to Bash
Thank you very much fellow Bash!

$ bashcomp thanks from Bash
Bash says Thank you!
</code></pre><h3 id="completion">completion</h3>
<pre tabindex="0"><code>$ bashcomp completion
...
... it will output a shell script you can save as a local file ...
...
</code></pre><h2 id="autocomplete-function">Autocomplete function</h2>
<p>In order to make it easier to maintain the auto compete function, I have decided to keep it
in a separate script named <code>bash_completion.sh</code>.</p>
<p>This script offers completion support for the main options: <code>hello</code>, <code>goodbye</code>, <code>thanks</code> and <code>completion</code>.
In case you choose <code>thanks</code>, its allowed arguments will be offered, which are: <code>to</code> and <code>from</code>.</p>
<h2 id="how-does-it-get-bound-to-the-bashcomp-application">How does it get bound to the bashcomp application</h2>
<p>If you look at the <code>Makefile</code> file in the Git Repository link above, you can see
that I am associating the content of <code>bash_completion.sh</code> encoded as Base 64 with
<code>main.BashCompletionEncoded</code> variable that is defined at <code>bashcomp.go</code>. It all
happens at build time.</p>
<p>Why doing so? Because this way you can ship just your <code>bashcomp</code> binary file, and it
will be capable of generating the autocomplete shell script without the need to refer
to an external file or location.</p>
<h2 id="validating-autocomplete-in-action">Validating autocomplete in action</h2>
<ul>
<li>Let&rsquo;s clone the repository first</li>
</ul>
<pre tabindex="0"><code class="language-bigquery" data-lang="bigquery">$ git clone https://github.com/fgiorgetti/go-playground.git
$ cd go-playground/bashcomp
</code></pre><ul>
<li>Now build the application</li>
</ul>
<pre tabindex="0"><code class="language-bigquery" data-lang="bigquery">$ make
go build -ldflags &#34;-X main.BashCompletionEncoded=`cat bash_completion.sh | base64 -w 0`&#34; -o bashcomp bashcomp.go
./bashcomp completion &gt; bashcomp.bash.inc

Now you must run: source bashcomp.bash.inc

... and make sure you have &#39;bashcomp&#39; binary in your PATH
</code></pre><p>After <code>make</code> completes, you will find a <code>bashcomp</code> binary file as well as a
shell script named <code>bashcomp.bash.inc</code> (produced by <code>make</code>, which executed: <code>$ bashcomp completion</code>).</p>
<ul>
<li>Install <code>bashcomp</code> to your PATH</li>
</ul>
<p>I am installing it to my local <code>${HOME}/bin</code> directory, which is defined as part
of my <code>PATH</code>. If you use a different location, feel free to adjust the next command accordingly.</p>
<pre tabindex="0"><code class="language-bigquery" data-lang="bigquery">$ install bashcomp ${HOME}/bin
</code></pre><ul>
<li>Sourcing the autocomplete script</li>
</ul>
<p>Before autocomplete works in your <code>bash</code> session, you must source
the generated completion script by running:</p>
<pre tabindex="0"><code class="language-bigquery" data-lang="bigquery">$ source bashcomp.bash.inc
</code></pre><p>From now on, auto completion should work whenever you type:</p>
<p><code>bashcomp &lt;tab&gt;&lt;tab&gt;</code></p>
<p>or even</p>
<p><code>bashcomp thanks &lt;tab&gt;&lt;tab&gt;</code></p>
<p>That&rsquo;s all!</p>
<p>I hope you enjoyed and may have learned something interesting.</p>
]]></content>
        </item>
        
        <item>
            <title>Maintaining your Skupper Virtual Application Network with Gitops</title>
            <link>https://fgiorgetti.github.io/posts/20210129-skupper-and-gitops/</link>
            <pubDate>Fri, 29 Jan 2021 18:27:23 -0300</pubDate>
            
            <guid>https://fgiorgetti.github.io/posts/20210129-skupper-and-gitops/</guid>
            <description>Hybrid Cloud using Skupper Skupper enables service communication, transparently, across multiple Kubernetes clusters.
For more information about Skupper, as well as documentation and great examples, please visit https://skupper.io/.
This article demonstrates how to setup and maintain a Virtual Application Network (VAN) using Skupper.
The standard documented approach for setting up a Skupper network, is through the use of its Command Line Interface (CLI) tool named skupper.
Following its documentation and some examples, you will connect your cloud applications through a set of imperative commands that will help you setting everything up.</description>
            <content type="html"><![CDATA[<h2 id="hybrid-cloud-using-skupper">Hybrid Cloud using Skupper</h2>
<p>Skupper enables service communication, transparently,
across multiple Kubernetes clusters.</p>
<p>For more information about Skupper, as well as documentation and
great examples, please visit <a href="https://skupper.io/">https://skupper.io/</a>.</p>
<p>This article demonstrates how to setup and maintain a
Virtual Application Network (VAN) using Skupper.</p>
<p>The standard documented approach for setting up a Skupper network, is
through the use of its Command Line Interface (CLI) tool named <code>skupper</code>.</p>
<p>Following its documentation and some examples, you will connect your
cloud applications through a set of imperative commands that will help you
setting everything up.</p>
<p>This approach works just fine. But imagine if you have a set of services
to be exposed and you have multiple sites to maintain.</p>
<p>Your exposed services may need to change from time to time and/or you might
need to recover one of your sites if something goes wrong. To keep everything
in shape, you will need to execute multiple commands or write a set of scripts
so your environment is always at the expected state, and this is not a trivial
thing to achieve.</p>
<p>Skupper provides a <a href="https://skupper.io/start/index.html">Getting started</a> which shows how to connect two clusters using
the CLI. They also document connecting two clusters in Configuring Skupper sites using YAML.</p>
<p>In order to keep this tutorial simple, we will connect two namespaces in the same cluster while showing you how to use Argo CD.</p>
<h2 id="gitops-using-argo-cd">GitOps using Argo CD</h2>
<p>The goal here is to demonstrate how you can setup a GitOps operator in your
cluster, so that all your distribute application, as well as your Virtual Application Network
can always be up to date with your desired state, or a single source of truth.</p>
<p>Argo CD helps you maintaining the state of your Kubernetes resources in sync
with a Git Repository (your source of truth).</p>
<p>Therefore all you need to do is keep your resources updated in your repository,
adjusting them as needed, and Argo CD will guarantee your cluster has always
the latest version you have defined.</p>
<p>In this tutorial, I am using a personal git repository. If you want to make changes to the resources used in this
example to observe Argo CD syncing it with your cluster, feel free to fork the <a href="https://github.com/fgiorgetti/skupper-example-hello-world.git">sample repository</a> (branch: <strong>gitops</strong>) and update
the GIT url used in the upcoming sections.</p>
<h2 id="setting-up-a-local-cluster">Setting up a local cluster</h2>
<p>If you don&rsquo;t yet have a running cluster, you can follow the steps below to
download and run a local Minikube cluster in your machine.</p>
<p><a href="https://minikube.sigs.k8s.io/docs/start/">Minikube installation instructions</a>.</p>
<h2 id="installing-your-gitops-operator">Installing your GitOps Operator</h2>
<p>The instructions below have been copied from the <a href="https://argoproj.github.io/argo-cd/getting_started/">Argo CD Getting Started Guide</a>.</p>
<ol>
<li>Create a namespace for the Argo CD operator</li>
</ol>
<pre tabindex="0"><code>kubectl create namespace argocd
</code></pre><ol start="2">
<li>Install Argo CD from Installation YAML</li>
</ol>
<pre tabindex="0"><code>kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
</code></pre><ol start="3">
<li>Install the <code>argocd</code> CLI</li>
</ol>
<p>Download the latest version of Argo CD CLI. Visit <a href="https://github.com/argoproj/argo-cd/releases/latest">https://github.com/argoproj/argo-cd/releases/latest</a>
and download the binary for your operating system.</p>
<ol start="4">
<li>Expose your Argo CD Server locally</li>
</ol>
<p>There are multiple ways you can use to get access to your Argo CD GUI, but
in order to keep this guide simple, we are going to create a port-forward
directly to the argocd-server service.</p>
<pre tabindex="0"><code>kubectl port-forward svc/argocd-server -n argocd 8080:443
</code></pre><p>Now you can access your API by using: <code>localhost:8080</code>.</p>
<p>You will see a page like:
<img src="/images/20210129-argocd-login.png"></p>
<ol start="5">
<li>
<p>Logging in using your CLI</p>
<p>5.1. First we need to retrieve the generated password. To do so, run:</p>
<pre tabindex="0"><code>$ kubectl get pods -n argocd -l app.kubernetes.io/name=argocd-server -o name | cut -d&#39;/&#39; -f 2
</code></pre><p>The returned output is the initial password. Please save it temporarily.</p>
<p>5.2. Login using argocd</p>
<pre tabindex="0"><code>$ argocd login localhost:8080
WARNING: server certificate had error: x509: certificate signed by unknown authority. Proceed insecurely (y/n)? y
Username: admin
Password:
&#39;admin&#39; logged in successfully
Context &#39;localhost:8080&#39; updated
</code></pre><p>5.3. Update admin&rsquo;s password</p>
<pre tabindex="0"><code>$ argocd account update-password
*** Enter current password:
*** Enter new password:
*** Confirm new password:
Password updated
Context &#39;localhost:8080&#39; updated
</code></pre></li>
<li>
<p>Creating an application from a Git Repository</p>
</li>
</ol>
<p>The application we are going to deploy, in order to demonstrate how GitOps works
as well as how Skupper helps you, is a tiny HTTP application that runs across
two Kubernetes clusters (or in this demonstration, against two Kubernetes namespaces).</p>
<p>This <a href="https://github.com/skupperproject/skupper-example-hello-world">Hello World HTTP application</a> is part
of the <a href="https://skupper.io/examples/">Skupper&rsquo;s Examples WebSite</a>.</p>
<p>It is composed by a Backend and a Frontend service. We are going to deploy each component to a different
namespace in our Kubernetes cluster.</p>
<p><img src="https://github.com/skupperproject/skupper-example-hello-world/raw/master/images/entities.svg"></p>
<p>Once we have these two components running, they will not be able to communicate. The goal, at this point,
is just to make sure both components are running isolatedly on their own namespaces.</p>
<h2 id="argo-cd-applications">Argo CD applications</h2>
<p>An Argo CD application defines the <code>source</code> (Git Repository and path) and the <code>destination</code> (A Kubernetes cluster / namespace).
Basically Argo CD will try to keep the resources you have defined at your <code>source</code> synchronized with your <code>destination</code>.</p>
<p>There are multiple ways to define an Argo CD application. For example:</p>
<ul>
<li>Using the <code>argocd</code> CLI</li>
<li>Defining an <code>Application</code> custom resource (apiVersion <code>argoproj.io/v1alpha1</code>), that is managed by Argo CD</li>
<li>Or using the Argo CD GUI (Console)</li>
</ul>
<p>To keep things simple, we are going to use the <strong>Argo CD GUI</strong> to create the GitOps applications.</p>
<p><em><strong>Important:</strong> In a real environment, you might consider defining an &ldquo;App of apps&rdquo;. For more information please visit <a href="https://argoproj.github.io/argo-cd/operator-manual/cluster-bootstrapping/#app-of-apps-pattern">https://argoproj.github.io/argo-cd/operator-manual/cluster-bootstrapping/#app-of-apps-pattern</a></em>**</p>
<h2 id="creating-an-argo-cd-application-to-the-frontend-service">Creating an Argo CD application to the Frontend service</h2>
<p>The Frontend service application is defined at this <a href="https://github.com/fgiorgetti/skupper-example-hello-world/tree/gitops">particular GIT Repository</a>
at the <strong><code>gitops</code></strong> branch.</p>
<p>Go the the repository and explore the contents of <strong><code>/gitops/gitops/west/frontend</code></strong> directory.</p>
<p>The application itself is a simple HTTP application that attempts to invoke a hello world
API that is supposed to run at the east namespace.</p>
<p>To create it in Argo CD, follow these steps:</p>
<ol>
<li>
<p>At the Argo CD console, click &ldquo;+ NEW APP&rdquo;</p>
<p><img src="/images/20210129-new-app.png"></p>
</li>
<li>
<p>Enter the new application information:</p>
<ol>
<li>General:
<ol>
<li>Application Name: <strong>hello-world-frontend</strong></li>
<li>Project: <strong>default</strong></li>
<li>Sync Policy: <strong>Automatic</strong></li>
<li>Sync Options:
<ol>
<li>Check <strong>Auto-create Namespace</strong></li>
</ol>
</li>
</ol>
</li>
<li>Source:
<ol>
<li>Repository URL: <strong><a href="https://github.com/fgiorgetti/skupper-example-hello-world.git">https://github.com/fgiorgetti/skupper-example-hello-world.git</a></strong></li>
<li>Revision: <strong>gitops</strong></li>
<li>Path: <strong>gitops/west/frontend/</strong></li>
</ol>
</li>
<li>Destination:
<ol>
<li>Cluster URL: <strong><a href="https://kubernetes.default.svc">https://kubernetes.default.svc</a></strong></li>
<li>Namespace: <strong>west</strong></li>
</ol>
</li>
</ol>
</li>
<li>
<p>Click <code>CREATE</code>.</p>
</li>
</ol>
<h2 id="creating-an-argo-cd-application-to-the-backend-service">Creating an Argo CD application to the Backend service</h2>
<p>The Backend service application is defined at this <a href="https://github.com/fgiorgetti/skupper-example-hello-world/tree/gitops">particular GIT Repository</a>
at the <strong><code>gitops</code></strong> branch.</p>
<p>Go the the repository and explore the contents of <strong><code>/gitops/gitops/east/backend</code></strong> directory.</p>
<p>This backend application provides a <strong><code>/api/hello</code></strong> endpoint that will be invoked by
the frontend application running at the <code>west</code> namespace.</p>
<h3 id="understanding-what-is-being-deployed">Understanding what is being deployed</h3>
<p>Inspect the deployment descriptor for the <code>hello-world-backend</code> application that
is going to be deployed to the <code>east</code> namespace.</p>
<p><a href="https://github.com/fgiorgetti/skupper-example-hello-world/blob/0388bee7b89ba01402bc0edddcd99ec531b3a4e0/gitops/east/backend/01-deployment.yaml#L7-L9">/gitops/east/backend/01-deployment.yaml</a></p>
<p>Note that is contains two annotations:</p>
<pre tabindex="0"><code>    skupper.io/port: &#34;8080&#34;
    skupper.io/proxy: &#34;http&#34;
</code></pre><p>The first one <code>skupper.io/port</code> defines the port of the deployment to be exposed
and the second one <code>skupper.io/proxy</code> defines the protocol of the service being
exposed.</p>
<p>This is what you need to add to the resource you want to expose, so when Skupper
is initialized in your namespace, it will create the respective service accordingly.
The new service will be replicated to other sites automatically.</p>
<p>To create it in Argo CD, follow these steps:</p>
<ol>
<li>Back to the Argo CD console, click &ldquo;+ NEW APP&rdquo; again</li>
<li>Enter the new application information:
<ol>
<li>General:
<ol>
<li>Application Name: <strong>hello-world-backend</strong></li>
<li>Project: <strong>default</strong></li>
<li>Sync Policy: <strong>Automatic</strong></li>
<li>Sync Options:
<ol>
<li>Check <strong>Auto-create Namespace</strong></li>
</ol>
</li>
</ol>
</li>
<li>Source:
<ol>
<li>Repository URL: <strong><a href="https://github.com/fgiorgetti/skupper-example-hello-world.git">https://github.com/fgiorgetti/skupper-example-hello-world.git</a></strong></li>
<li>Revision: <strong>gitops</strong></li>
<li>Path: <strong>gitops/east/backend/</strong></li>
</ol>
</li>
<li>Destination:
<ol>
<li>Cluster URL: <strong><a href="https://kubernetes.default.svc">https://kubernetes.default.svc</a></strong></li>
<li>Namespace: <strong>east</strong></li>
</ol>
</li>
</ol>
</li>
<li>Click <code>CREATE</code>.</li>
</ol>
<h2 id="validate-applications-are-running">Validate applications are running</h2>
<p>Verify the artifacts that have been created on both namespaces.</p>
<pre tabindex="0"><code>$ kubectl -n west get all
NAME                                        READY   STATUS    RESTARTS   AGE
pod/hello-world-frontend-55c84976c7-c6mq5   1/1     Running   0          31m

NAME                                   READY   UP-TO-DATE   AVAILABLE   AGE
deployment.apps/hello-world-frontend   1/1     1            1           31m

NAME                                              DESIRED   CURRENT   READY   AGE
replicaset.apps/hello-world-frontend-55c84976c7   1         1         1       31m
</code></pre><pre tabindex="0"><code>$ kubectl -n east get all
NAME                                      READY   STATUS    RESTARTS   AGE
pod/hello-world-backend-d8cf49cb7-h5vd4   1/1     Running   0          21m

NAME                                  READY   UP-TO-DATE   AVAILABLE   AGE
deployment.apps/hello-world-backend   1/1     1            1           21m

NAME                                            DESIRED   CURRENT   READY   AGE
replicaset.apps/hello-world-backend-d8cf49cb7   1         1         1       21m
</code></pre><p>At this point both the Frontend and Backend applications are running inside your
cluster and in different namespaces. But as said earlier, they cannot communicate
with each other.</p>
<p>Let&rsquo;s try to create another port-forward to the frontend service, so we can verify
it is up, but failing because it cannot reach the <code>backend</code> service.</p>
<pre tabindex="0"><code>$ kubectl -n west port-forward deployment/hello-world-frontend  8081:8080
</code></pre><p>Try opening your browser and access: <code>http://localhost:8081</code>.</p>
<p>You should see an error like:</p>
<pre tabindex="0"><code>Trouble! HTTPConnectionPool(host=&#39;hello-world-backend&#39;, port=8080): Max retries exceeded with url: /api/hello (Caused by NewConnectionError(&#39;&lt;urllib3.connection.HTTPConnection object at 0x7f0d059d7dd0&gt;: Failed to establish a new connection: [Errno -2] Name or service not known&#39;))
</code></pre><p>The error above is an expected error, since both namespaces do not communicate&hellip; yet.</p>
<h2 id="declaring-a-skupper-network-in-your-git-repository">Declaring a Skupper network in your git repository</h2>
<p>First thing to do is ensure that we have Skupper running on both namespaces.
To do that, lets define another two Argo CD applications (one for each namespace).</p>
<h3 id="creating-a-skupper-site-on-the-west-namespace">Creating a Skupper site on the west namespace</h3>
<ol>
<li>At the Argo CD console, click &ldquo;+ NEW APP&rdquo;</li>
<li>Enter the new application information:
<ol>
<li>General:
<ol>
<li>Application Name: <strong>skupper-west</strong></li>
<li>Project: <strong>default</strong></li>
<li>Sync Policy: <strong>Automatic</strong></li>
<li>Sync Options:
<ol>
<li>Check <strong>Auto-create Namespace</strong></li>
</ol>
</li>
</ol>
</li>
<li>Source:
<ol>
<li>Repository URL: <strong><a href="https://github.com/fgiorgetti/skupper-example-hello-world.git">https://github.com/fgiorgetti/skupper-example-hello-world.git</a></strong></li>
<li>Revision: <strong>gitops</strong></li>
<li>Path: <strong>gitops/west/skupper/</strong></li>
</ol>
</li>
<li>Destination:
<ol>
<li>Cluster URL: <strong><a href="https://kubernetes.default.svc">https://kubernetes.default.svc</a></strong></li>
<li>Namespace: <strong>west</strong></li>
</ol>
</li>
</ol>
</li>
<li>Click <code>CREATE</code>.</li>
</ol>
<h3 id="creating-a-skupper-site-on-the-east-namespace">Creating a Skupper site on the east namespace</h3>
<ol>
<li>Back to the Argo CD console, click &ldquo;+ NEW APP&rdquo;</li>
<li>Enter the new application information:
<ol>
<li>General:
<ol>
<li>Application Name: <strong>skupper-east</strong></li>
<li>Project: <strong>default</strong></li>
<li>Sync Policy: <strong>Automatic</strong></li>
<li>Sync Options:
<ol>
<li>Check <strong>Auto-create Namespace</strong></li>
</ol>
</li>
</ol>
</li>
<li>Source:
<ol>
<li>Repository URL: <strong><a href="https://github.com/fgiorgetti/skupper-example-hello-world.git">https://github.com/fgiorgetti/skupper-example-hello-world.git</a></strong></li>
<li>Revision: <strong>gitops</strong></li>
<li>Path: <strong>gitops/east/skupper/</strong></li>
</ol>
</li>
<li>Destination:
<ol>
<li>Cluster URL: <strong><a href="https://kubernetes.default.svc">https://kubernetes.default.svc</a></strong></li>
<li>Namespace: <strong>east</strong></li>
</ol>
</li>
</ol>
</li>
<li>Click <code>CREATE</code>.</li>
</ol>
<h3 id="verifying-the-skupper-network">Verifying the Skupper network</h3>
<p>Let&rsquo;s verify Skupper is running properly in your namespaces. But first, you might need to
download the <code>skupper</code> tool. Please visit the <a href="https://github.com/skupperproject/skupper/releases">Skupper releases page</a>
and download the client for your operating system.</p>
<p><em>Make sure to install it as <code>skupper</code> and make sure it is available in your PATH.</em></p>
<h4 id="validating-pods">Validating pods</h4>
<pre tabindex="0"><code>$ kubectl -n west get pods
NAME                                         READY   STATUS    RESTARTS   AGE
hello-world-frontend-55c84976c7-c6mq5        1/1     Running   0          91m
skupper-router-79b9db88bb-r42cf              1/1     Running   0          19m
skupper-service-controller-b894b6554-gt64t   1/1     Running   0          19m
skupper-site-controller-fc56c7686-wtwwp      1/1     Running   0          19m
</code></pre><h4 id="validating-skupper-status">Validating skupper status</h4>
<pre tabindex="0"><code>$ skupper -n west status
Skupper is enabled for namespace &#34;west&#34; with site name &#34;skupper-west&#34; in interior mode. It is not connected to any other sites. It has no exposed services.
</code></pre><p><em>Repeat the same validation using the <strong>east</strong> namespace.</em></p>
<h3 id="creating-a-connection-token-to-the-west-namespace">Creating a connection token to the west namespace</h3>
<p>Next we need to create our Virtual Application Network (VAN) using Skupper
to allow communication with exposed services from all namespaces.</p>
<p>To do that, we must use the <code>skupper</code> tool to generate a connection token to
the <code>west</code> namespace.</p>
<pre tabindex="0"><code>$ skupper -n west token create /tmp/west.token.yaml
</code></pre><p>This token allows you to connect another site to Skupper running at the <code>west</code>
namespace. So it must be stored carefully.</p>
<p>In this demo, we are not storing tokens in our Git Repository, but if you plan
to do so, make sure you are using <code>git crypt</code> to avoid exposing your certificates.</p>
<h3 id="connecting-east-namespace-to-the-west-namespace">Connecting east namespace to the west namespace</h3>
<p>As said above, we do not have the token in our sample Git Repository, so we must
manually connect the <code>east</code> namespace to the <code>west</code> namespace.</p>
<p>To do that, run:</p>
<pre tabindex="0"><code>$ skupper -n east link create /tmp/west.token.yaml
</code></pre><h3 id="verify-skupper-network-is-connected">Verify Skupper network is connected</h3>
<p>After you have linked the two sites, you can monitor your network to ensure Skupper
network is connected. Run:</p>
<ul>
<li>From <code>west</code> namespace</li>
</ul>
<pre tabindex="0"><code>$ skupper -n west status
Skupper is enabled for namespace &#34;west&#34; with site name &#34;skupper-west&#34; in interior mode. It is connected to 1 other site. It has 1 exposed service.
</code></pre><ul>
<li>From <code>east</code> namespace</li>
</ul>
<pre tabindex="0"><code>$ skupper -n east status
Skupper is enabled for namespace &#34;east&#34; with site name &#34;skupper-east&#34; in interior mode. It is connected to 1 other site. It has 1 exposed service.
</code></pre><p>Now our Virtual Application Network is connected and the <code>hello-world-backend</code> deployment
has been exposed as a service and it is available on both namespaces.</p>
<h2 id="testing-the-frontend-application">Testing the frontend application</h2>
<p>To test the frontend application, lets run the port-forward to the <code>hello-world-frontend</code> deployment
one more time.</p>
<pre tabindex="0"><code>kubectl -n west port-forward deployment/hello-world-frontend 8081:8080
</code></pre><p>Now open your Browser and type: <code>http://localhost:8081</code>.
You should see a message like:</p>
<pre tabindex="0"><code>I am the frontend.  The backend says &#39;Hello from hello-world-backend-d8cf49cb7-h5vd4 (1)&#39;.
</code></pre><p>Success! Now the Frontend application running at the <code>west</code> namespace can reach out
to the Backend application running at the <code>east</code> namespace through Skupper&rsquo;s exposed
service <code>hello-world-backend</code>.</p>
<p>I hope you might find this useful to help you setting up your GitOps operator and Skupper.</p>
]]></content>
        </item>
        
    </channel>
</rss>
